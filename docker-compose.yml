services:
    app:
        build:
            context: .
            dockerfile: Dockerfile.backend
            target: dev # target stage to build, CHANGE to prod for production
        container_name: backend
        restart: unless-stopped
        expose:
            - ${BACKEND_PORT}
        ports:
            - ${BACKEND_PORT}:${BACKEND_PORT}
        depends_on:
            - db
            - mongo-db
        volumes: # remove after testing
            - .:/app
        env_file: .env
        networks:
            - textractor_network

    db:
        image: "postgres:16.2-alpine3.19"
        container_name: userdb
        restart: unless-stopped
        expose:
            - ${POSTGRES_PORT}
        ports:
            - ${POSTGRES_PORT}:${POSTGRES_PORT}
        volumes:
            - user-data:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        env_file: .env
        networks:
            - textractor_network

    mongo-db:
        build:
            context: .
            dockerfile: Dockerfile.mongodb
        container_name: imagedb
        restart: unless-stopped
        expose:
            - ${MONGO_PORT}
        ports:
            - ${MONGO_PORT}:${MONGO_PORT}
        volumes:
            - image-data:/data/db
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
        env_file: .env
        networks:
            - textractor_network

    # cache:
    #     image: redis:latest
    #     container_name: cache
    #     restart: unless-stopped
    #     expose:
    #         - ${REDIS_PORT}
    #     ports:
    #         - ${REDIS_PORT}:${REDIS_PORT}
    #     volumes:
    #         - cache-data:/data
    #     env_file: .env
    #     networks:
    #         - textractor_network

    auth:
      image: keycloak:latest
      container_name: auth
      restart: unless-stopped
      command: start
      expose:
          - ${KEYCLOAK_PORT}
      ports:
          - "${KEYCLOAK_PORT}:${KEYCLOAK_PORT}"
      environment:
          - KC_PROXY_ADDRESS_FORWARDING=${KC_PROXY_ADDRESS_FORWARDING}
          - KC_HOSTNAME_STRICT=${KC_HOSTNAME_STRICT}
          - KC_HOSTNAME=${KC_HOSTNAME}
          - KC_PROXY=${KC_PROXY}
          - KC_HTTP_ENABLED=${KC_HTTP_ENABLED}
          - DB=${KC_DB_NAME}
          - DB_URL=${KC_DB_URL}
          - DB_USERNAME=${KC_DB_USERNAME}
          - DB_PASSWORD=${KC_DB_PASSWORD}
          - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
          - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      env_file: .env
      networks:
        proxy:
        textractor_network:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.keycloak.entrypoints=http"
        - "traefik.http.routers.keycloak.rule=Host(`keycloak.jimsgarage.co.uk`)"
        - "traefik.http.middlewares.keycloak-https-redirect.redirectscheme.scheme=https"
        - "traefik.http.routers.keycloak.middlewares=keycloak-https-redirect"
        - "traefik.http.routers.keycloak-secure.entrypoints=https"
        - "traefik.http.routers.keycloak-secure.rule=Host(`keycloak.jimsgarage.co.uk`)*"
        - "traefik.http.routers.keycloak-secure.tls=true"
        - "traefik.http.routers.keycloak-secure.service=keycloak"
        - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
        - "traefik.docker.network=proxy"
networks:
  proxy:
    external: true
  keycloak:

volumes:
    user-data:
    image-data:
    # cache-data:

networks:
    textractor_network:
