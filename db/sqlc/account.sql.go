// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    owner,
    email,
    google_id,
    facebook_id
) VALUES ($1, $2, $3, $4)
RETURNING id, owner, email, google_id, facebook_id, image_count, subscribed, created_at
`

type CreateAccountParams struct {
	Owner      string         `json:"owner"`
	Email      string         `json:"email"`
	GoogleID   sql.NullString `json:"google_id"`
	FacebookID sql.NullString `json:"facebook_id"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Owner,
		arg.Email,
		arg.GoogleID,
		arg.FacebookID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.GoogleID,
		&i.FacebookID,
		&i.ImageCount,
		&i.Subscribed,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, email, google_id, facebook_id, image_count, subscribed, created_at FROM accounts
WHERE id = $1
LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.GoogleID,
		&i.FacebookID,
		&i.ImageCount,
		&i.Subscribed,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, owner, email, google_id, facebook_id, image_count, subscribed, created_at FROM accounts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.GoogleID,
		&i.FacebookID,
		&i.ImageCount,
		&i.Subscribed,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner, email, google_id, facebook_id, image_count, subscribed, created_at FROM accounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Email,
			&i.GoogleID,
			&i.FacebookID,
			&i.ImageCount,
			&i.Subscribed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE accounts
SET email = $2
WHERE id = $1
RETURNING id, owner, email, google_id, facebook_id, image_count, subscribed, created_at
`

type UpdateEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateEmail, arg.ID, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.GoogleID,
		&i.FacebookID,
		&i.ImageCount,
		&i.Subscribed,
		&i.CreatedAt,
	)
	return i, err
}

const updateImageCount = `-- name: UpdateImageCount :one
UPDATE accounts
SET image_count = image_count + $1
RETURNING id, owner, email, google_id, facebook_id, image_count, subscribed, created_at
`

func (q *Queries) UpdateImageCount(ctx context.Context, amount sql.NullInt64) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateImageCount, amount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.GoogleID,
		&i.FacebookID,
		&i.ImageCount,
		&i.Subscribed,
		&i.CreatedAt,
	)
	return i, err
}

const updateSubscribed = `-- name: UpdateSubscribed :one
UPDATE accounts
SET subscribed = $2
WHERE id = $1
RETURNING id, owner, email, google_id, facebook_id, image_count, subscribed, created_at
`

type UpdateSubscribedParams struct {
	ID         int64 `json:"id"`
	Subscribed bool  `json:"subscribed"`
}

func (q *Queries) UpdateSubscribed(ctx context.Context, arg UpdateSubscribedParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateSubscribed, arg.ID, arg.Subscribed)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.GoogleID,
		&i.FacebookID,
		&i.ImageCount,
		&i.Subscribed,
		&i.CreatedAt,
	)
	return i, err
}
